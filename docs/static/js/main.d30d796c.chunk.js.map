{"version":3,"sources":["services/request.js","routers/home/module/actionConstants.js","routers/home/module/home.js","components/dynamicForm/index.js","routers/home/components/HomeComponent/index.js","routers/home/container/index.js","routers/home/index.js","routers/index.js","store/reducers/index.js","App.js","store/index.js","serviceWorker.js","index.js"],"names":["services_request","request","Object","classCallCheck","this","service","axios","create","interceptors","use","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","config","wrap","_context","prev","next","abrupt","stop","_x","apply","arguments","url","callback","method","responseType","then","response","data","actionConstants","history","window","location","pathname","split","FETCH_DATA","constants","UPDATE_INPUT_DATA","UPDATE_CHECKBOX_DATA","UPDATE_STEP","FORM_DATA","STEP","ACTION_HANDLERS","state","action","objectSpread","dynamicInfo","payload","temp","assign","map","o","_id","key","value","localStorage","setItem","JSON","stringify","length","index","indexOf","splice","push","step","SUBMIT_DATA","submittedValue","initialState","Number","getItem","DynamicForm","obj","updateStep","updateInputData","updateCheckboxData","progressValue","parseInt","styles","progressBar","width","concat","handleUpdateStep","react_default","createElement","className","style","htmlFor","title","options","type","onChange","ev","target","values","r","i","text","name","checked","v","find","renderFormBody","validation","show","message","element","q","forEach","getSummary","onClick","disabled","HomeComponent","components_dynamicForm","HomeContainer","_this","props","fetchData","listen","stepInHistory","components_HomeComponent","Component","mapDispatchToProps","cachedData","dispatch","parse","get","res","connect","home","Application","BrowserRouter","Route","exact","path","component","Home","combineReducers","undefined","handler","App","es","store","middleware","composeWithDevTools","applyMiddleware","thunk","createStore","reducers","configureStore","routers","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d30d796c.chunk.js","sourcesContent":["import axios from 'axios';\n\n//A SIMPLE REQUEST SERVICE WRAPPER ONLY GOOD FOR SUNNY DAYS!\nclass request {\n  \n  constructor() {\n    let service = axios.create({});\n    service.interceptors.request.use(async (config) => {\n      return config\n    })\n    this.service = service;\n  }\n  get(url, callback) {\n    return this.service.request({\n      method: 'GET',\n      url,\n      responseType: 'json',\n    }).then((response) => callback(response.data));\n  }\n}\n\nexport default new request();\n","export default {\n    FETCH_DATA : \"FETCH_DATA\",\n    UPDATE_INPUT_DATA : \"UPDATE_INPUT_DATA\",\n    UPDATE_CHECKBOX_DATA : \"UPDATE_CHECKBOX_DATA\",\n    UPDATE_STEP : \"UPDATE_STEP\",\n    SUBMIT_DATA : \"SUBMIT_DATA\",\n    FORM_DATA : \"FORM_DATA\",\n    STEP : \"STEP\"\n}","import request from \"../../../services/request\"\nimport constants from \"./actionConstants\";\nconst history = window.location.pathname && window.location.pathname.split(\"/\")\nconst {\n    FETCH_DATA,\n    UPDATE_INPUT_DATA,\n    UPDATE_CHECKBOX_DATA,\n    UPDATE_STEP,\n    SUBMIT_DATA,\n    FORM_DATA,\n    STEP,\n} = constants\n\nexport function updateStep(payload) {\n    return (dispatch) => {\n        dispatch({\n            type: UPDATE_STEP,\n            payload\n        });\n    }\n}\n\nexport function fetchData() {\n    //CAN IMPLEMENT LOADING AND ERROR HANDLING ACTIONS AS WELL LATER\n    const cachedData = localStorage.getItem(FORM_DATA)\n    return (dispatch) => {\n        if (cachedData) {\n            dispatch({\n                type: FETCH_DATA,\n                payload: JSON.parse(cachedData)\n            })\n        } else {\n            request.get('/mock.json', (res) => {\n                dispatch({\n                    type: FETCH_DATA,\n                    payload: res.data\n                });\n                localStorage.setItem(FORM_DATA, JSON.stringify(res.data))\n            })\n        }\n    };\n}\n\nexport function updateInputData(payload) {\n    return (dispatch) => {\n        dispatch({\n            type: UPDATE_INPUT_DATA,\n            payload\n        })\n    }\n}\n\nexport function submitData(payload) {\n    return (dispatch) => {\n        dispatch({\n            type: SUBMIT_DATA,\n            payload\n        })\n    }\n}\n\nexport function updateCheckboxData(payload) {\n    return (dispatch) => {\n        dispatch({\n            type: UPDATE_CHECKBOX_DATA,\n            payload\n        })\n    }\n}\n\n\n\nconst ACTION_HANDLERS = {\n    FETCH_DATA: handleFetchData,\n    UPDATE_INPUT_DATA: handleUpdateInputData,\n    UPDATE_CHECKBOX_DATA: handleUpdateCheckboxData,\n    UPDATE_STEP: handleUpdateStep,\n    SUBMIT_DATA: handleSubmitData\n}\n\nfunction handleUpdateStep(state, action) {\n    localStorage.setItem(STEP, action.payload)\n    return {\n        ...state, step: action.payload\n    }\n}\n\nfunction handleUpdateInputData(state, action) {\n    let { dynamicInfo } = state\n    let temp = Object.assign([], dynamicInfo)\n    temp && temp.map(o => {\n        if (o._id === action.payload.key) {\n            o.value = action.payload.value\n        }\n        return o\n    })\n    localStorage.setItem(FORM_DATA, JSON.stringify(temp))\n    return {\n        ...state, dynamicInfo: temp\n    }\n}\n\n//NOT IN USE\nfunction handleSubmitData(state, action) {\n    let { dynamicInfo } = state\n    let temp = Object.assign([], dynamicInfo)\n    temp && temp.map(o => {\n        if (o._id === action.payload.key) {\n            o.submittedValue = action.payload.value\n        }\n        return o\n    })\n    return {\n        ...state, dynamicInfo: temp\n    }\n}\n//\n\nfunction handleUpdateCheckboxData(state, action) {\n    let { dynamicInfo } = state\n    let temp = Object.assign([], dynamicInfo)\n    temp && temp.map(o => {\n        if (o._id === action.payload.key) {\n            if (o.value && o.value.length > 0) {\n                var index = o.value.indexOf(action.payload.value);\n                if (index > -1) {\n                    o.value.splice(index, 1);\n                } else {\n                    o.value.push(action.payload.value)\n                }\n            } else {\n                o.value = []\n                o.value.push(action.payload.value)\n            }\n        }\n        return o\n    })\n    localStorage.setItem(FORM_DATA, JSON.stringify(temp))\n    return {\n        ...state, dynamicInfo: temp\n    }\n}\n\nfunction handleFetchData(state, action) {\n    return {\n        ...state, dynamicInfo: action.payload\n    }\n}\n\nconst initialState = {\n    dynamicInfo: [],\n    step: (history && history.length > 0 && Number(history[1])) || Number(localStorage.getItem(STEP) || 0)\n};\n\nexport default function homeReducer(state = initialState, action) {\n    const handler = ACTION_HANDLERS[action.type];\n    return handler ? handler(state, action) : state;\n}\n","import React from 'react'\nimport './index.scss'\n\nconst DynamicForm = ({\n    dynamicInfo,\n    step,\n    updateStep,\n    updateInputData,\n    updateCheckboxData,\n    history\n}) => {\n    let status\n\n    const progressValue = parseInt((100 / dynamicInfo.length) * (step))\n\n    const styles = {\n        progressBar: {\n            width: `${progressValue}%`\n        }\n    }\n\n    const handleUpdateStep = (value) => {\n        history.push(`/${step + value}`)\n        updateStep(step + value)\n    }\n\n    const validateForm = (obj) => {\n        status = (obj.value && obj.value.length && true) || false\n        return status\n    }\n\n    const getSummary = (element, index) => {\n        const { type, value, values, title } = element\n        if (!value) return\n        var q, a //QUESTION && ANSWER\n        if (type === 'text' || type === 'number') {\n            q = title\n            a = value\n        }\n        if (type === 'radio' || type === 'select') {\n            q = title\n            a = values.find(o => o.key === value).text\n        }\n        if (type === 'checkbox') {\n            a = \"\"\n            value && value.forEach(v => {\n                a += `${a !== \"\" ? \",\" : \"\"} ${values.find(o => o.key === v).text}`\n            })\n            q = title\n        }\n        return (\n            <div key={index} className=\"form-row\">\n                <span className=\"bold\">\n                    {q}\n                </span>\n                <span>\n                    {a}\n                </span>\n            </div>\n        )\n    }\n\n    const renderFormBody = (obj) => {\n        const options = []\n        switch (obj.type) {\n            case \"text\":\n                return (\n                    <input\n                        type=\"text\"\n                        value={obj.value || \"\"}\n                        onChange={(ev) => updateInputData({\n                            key: obj._id,\n                            value: ev.target.value\n                        })}\n                    />\n                )\n            case \"number\":\n                return (\n                    <input\n                        type=\"number\"\n                        value={obj.value}\n                        onChange={(ev) => updateInputData({\n                            key: obj._id,\n                            value: ev.target.value\n                        })}\n                    />\n                )\n            case \"radio\":\n                obj.values.map((r, i) => {\n                    options.push(\n                        <span key={r.key}>\n                            {r.text}\n                            <input\n                                name=\"genderGroup\"\n                                checked={r.key === obj.value}\n                                type=\"radio\"\n                                onChange={() => {\n                                    updateInputData({\n                                        key: obj._id,\n                                        value: r.key\n                                    })\n                                }}\n                            />\n                        </span>\n\n                    )\n                    return r\n                })\n                return [\n                    options\n                ]\n            case \"checkbox\":\n                obj.values.map((r, i) => {\n                    options.push(\n                        <span key={r.key}>\n                            {r.text}\n                            <input\n                                type=\"checkbox\"\n                                key={r.key}\n                                value={r.text}\n                                onChange={(v) => {\n                                    updateCheckboxData({\n                                        key: obj._id,\n                                        value: r.key\n                                    })\n                                }}\n                                checked={(obj.value && obj.value.find(o => o === r.key)) || false}\n                            />\n                        </span>\n                    )\n                    return r\n                })\n                return [\n                    options\n                ]\n            case \"select\":\n                return (\n                    <select\n                        onChange={(ev) => {\n                            updateInputData({\n                                key: obj._id,\n                                value: ev.target.value\n                            })\n                        }}\n                        value={obj.value || \"select\"}>\n                        {obj && obj.values.map((o, i) => {\n                            return (\n                                <option\n                                    key={i}\n                                    value={o.key}\n                                >\n                                    {o.text}\n                                </option>\n                            )\n                        })}\n                    </select>\n                )\n            default:\n                break;\n        }\n    }\n\n    return (\n        <div className=\"container\">\n            <div className=\"wrapper\">\n\n                {/* PROGRESS BAR */}\n                <div className=\"progress light-grey\">\n                    <div className=\"grey bar\" style={styles.progressBar}>{(progressValue > 0) ? `${progressValue}%` : ''}</div>\n                </div>\n                {/* PROGRESS BAR */}\n\n                {/* FORM BODY */}\n                {\n                    dynamicInfo && (dynamicInfo.length > 0 && step < dynamicInfo.length) &&\n                    <div className=\"form-row margin-top-100\">\n                        <label htmlFor=\"name\">{dynamicInfo[step] && dynamicInfo[step].title}</label>\n                        {(step < dynamicInfo.length) ? renderFormBody(dynamicInfo[step]) : null}\n                    </div>\n                }\n                {\n                    dynamicInfo[step] && dynamicInfo[step].validation && dynamicInfo[step].validation.map((v, i) => {\n                        if (v.show) {\n                            return (\n                                <div\n                                    key={i}\n                                    className=\"red text-left\"\n                                >\n                                    {v.show && v.message}\n                                </div>\n                            )\n                        }\n                        return v    \n                    })\n                }\n                {/* FORM BODY */}\n\n\n                {/* SUMMARY */}\n                {\n                    dynamicInfo && (dynamicInfo.length > 0 && step === dynamicInfo.length) &&\n                    <section>\n                        {\n                            dynamicInfo.map((element, i) => {\n                                return (getSummary(element, i))\n                            })\n                        }\n                    </section>\n                }\n                {/* SUMMARY */}\n\n                {/* BUTTON ROW */}\n                <div className=\"button-row\">\n                    {\n                        step > 0 &&\n                        <input\n                            className=\"pull-left\"\n                            value=\"Back\"\n                            type=\"button\"\n                            onClick={() => handleUpdateStep(-1)} />\n                    }\n                    {\n                        step < dynamicInfo.length &&\n                        <input\n                            className=\"pull-right\"\n                            type=\"button\"\n                            disabled={!validateForm(dynamicInfo[step])}\n                            value={(step + 1 === dynamicInfo.length) ? 'Submit' : 'Next'}\n                            onClick={() => handleUpdateStep(1)} />\n                    }\n                </div>\n                {/* BUTTON ROW */}\n\n            </div>\n        </div>\n    )\n}\n\nexport default DynamicForm;","import React from 'react'\nimport DynamicForm from '../../../../components/dynamicForm'\n\nconst HomeComponent = ({\n    dynamicInfo,\n    step,\n    updateStep,\n    updateInputData,\n    updateCheckboxData,\n    history\n}) => {\n    return (\n        <DynamicForm \n            dynamicInfo={dynamicInfo}\n            step={step}\n            updateStep={updateStep}\n            history={history}\n            updateInputData={updateInputData}\n            updateCheckboxData={updateCheckboxData}\n        />\n    )\n}\nexport default HomeComponent","import React, { Component } from 'react';\nimport HomeComponent from '../components/HomeComponent'\n\nexport default class HomeContainer extends Component {\n  componentWillMount(){\n    this.props.fetchData()\n    // BROWSER BACK/FORWARD \n    this.props.history.listen((location, action) => {\n        if (action === 'POP') {\n          const stepInHistory = location.pathname && location.pathname.split(\"/\")\n          if (stepInHistory && stepInHistory.length > 1 && Number(stepInHistory[1]) < this.props.dynamicInfo.length) {\n            this.props.updateStep(Number(stepInHistory[1]))\n          }\n        }\n    });\n  }\n\n  componentWillReceiveProps(props){\n    // CHECK IF STEP IS VALID\n    if ((props.step && props.dynamicInfo) && (props.step > props.dynamicInfo.length)) {\n      props.updateStep(0)\n      props.history.push(`/`)\n    }\n  }\n\n  render() {\n    return (\n      <HomeComponent {...this.props}/>\n    );\n  }\n}\n","import { connect } from 'react-redux'\nimport { \n  fetchData, \n  updateStep, \n  updateInputData, \n  updateCheckboxData \n} from './module/home'\nimport HomeContainer from './container'\n\n\nfunction mapStateToProps(state) {\n  return {\n    dynamicInfo: state && state.home && state.home.dynamicInfo,\n    step: state && state.home && state.home.step\n  }\n}\n\nconst mapDispatchToProps = {\n    fetchData,\n    updateStep,\n    updateInputData,\n    updateCheckboxData,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HomeContainer)\n\n","import React from 'react'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\n\nimport Home from '../routers/home'\n\nconst Application = () => (\n  <Router>\n    <Route exact path=\"/:step?\" component={Home} />\n  </Router>\n)\n\nexport default Application","import { combineReducers } from 'redux'\nimport home from '../../routers/home/module/home'\n\nexport default combineReducers({\n  home\n})","import React, { Component } from 'react';\nimport Application from './routers/index'\nimport { Provider } from 'react-redux'\nimport configureStore from './store';\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={configureStore()}>\n        <Application/>\n      </Provider>  \n    );\n  }\n}\n\nexport default App;\n","import thunk from \"redux-thunk\"\nimport { createStore, applyMiddleware } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport reducers from './reducers'\n// import logger from 'redux-logger'\n\n\nexport default function configureStore() {\n  const middleware = composeWithDevTools(applyMiddleware(thunk))\n  const theStore = createStore(\n    reducers,\n    middleware\n  )\n  return theStore\n}\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.scss'\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();"],"sourceRoot":""}